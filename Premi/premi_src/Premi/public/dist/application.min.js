"use strict";var ApplicationConfiguration=function(){var applicationModuleName="premi",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("premi"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),function(){function config($mdThemingProvider){var lightGreyMap=$mdThemingProvider.extendPalette("grey",{500:"FAFAFA"});$mdThemingProvider.definePalette("light-grey",lightGreyMap),$mdThemingProvider.theme("default").primaryPalette("indigo").accentPalette("light-grey")}angular.module("premi").config(["$mdThemingProvider",config])}(),function(){angular.module("premi",["ngMaterial","ngRoute","ngTouch","premi.controllers","premi.directives","premi.services"])}(),function(){function routeProvider($routeProvider){$routeProvider.when("/login",{templateUrl:"app/views/logIn.view.html",controller:"LogInController"}).when("/signup",{templateUrl:"app/views/registration.view.html",controller:"RegistrationController"}).when("/dashboard",{templateUrl:"app/views/dashboard.view.html",controller:"DashboardController"}).when("/editor",{templateUrl:"app/views/mindmapEditor.html",controller:"MindmapEditorController"}).when("/paths",{templateUrl:"app/views/pathsEditor.view.html",controller:"PathsEditorController"}).when("/presentation/:pathId",{templateUrl:"app/views/presentation.view.html",controller:"PresentationViewController"}).otherwise({redirectTo:"/login"})}angular.module("premi").config(routeProvider),routeProvider.$inject=["$routeProvider"]}(),function(){function runBlock($rootScope,$location,$mdDialog,projectService,authenticationService){$rootScope.fullscreen=!1,$rootScope.$on("premi-fullscreen-on",function(){$rootScope.fullscreen=!0,window.dispatchEvent(new Event("resize"))}),$rootScope.$on("premi-fullscreen-off",function(){$rootScope.fullscreen=!1,window.dispatchEvent(new Event("resize"))}),$rootScope.$on("premi-error",function(evt,errorInfo){var dialogScope=$rootScope.$new(!0);dialogScope.errorObj=errorInfo,$mdDialog.show({scope:dialogScope,template:'<md-dialog aria-label="aggiungi associazione">  <md-dialog-content><premi-error-message error-info="errorObj"></premi-error-message></premi-add-to-path>  </md-dialog-content></md-dialog>'})});var routes={"/login":{requireLogin:!1,requireProject:!1},"/signup":{requireLogin:!1,requireProject:!1},"/dashboard":{requireLogin:!0,requireProject:!1},"/editor":{requireLogin:!0,requireProject:!0},"/paths":{requireLogin:!0,requireProject:!0},"/presentation":{requireLogin:!0,requireProject:!0}};$rootScope.$on("$locationChangeStart",function(event,next,current){for(var i in routes)-1!==next.indexOf(i)&&(routes[i].requireLogin&&!authenticationService.isLoggedIn()&&(event.preventDefault(),$location.path("/login")),routes[i].requireProject&&null===projectService.getCurrentProject()&&(event.preventDefault(),$location.path("/dashboard")))})}angular.module("premi").run(runBlock),runBlock.$inject=["$rootScope","$location","$mdDialog","projectService","authenticationService"]}(),describe("Test di unità TU44, TU45 e TU46 Premi::Front-End::Model::Path",function(){var pathTest,nr1=new NodeReference(0,"titolo1"),nr2=new NodeReference(1,"titolo2"),nr3=new NodeReference(2,"titolo2"),stepsTest={0:nr1,1:nr2,2:nr3};describe("Test di unità TU44",function(){beforeAll(function(){pathTest=new Path(1,"pathName",stepsTest,!0)}),it("Verifico addStep",function(){var lung=pathTest.getSteps().length;pathTest.addStep(3,"titolo3");var lungDopo=pathTest.getSteps().length;expect(lungDopo).toEqual(lung+1)}),it("Verifico deleteStep",function(){var lung=pathTest.getSteps().length;pathTest.deleteStep(3);var lungDopo=pathTest.getSteps().length;expect(lungDopo).toEqual(lung-1)})}),describe("Test di unità TU45",function(){beforeAll(function(){pathTest=new Path(1,"pathName",stepsTest,!0)}),it("Verifico getId",function(){var id=pathTest.getId();expect(id).toEqual(1)}),it("Verifico getName",function(){var name=pathTest.getName();expect(name).toEqual("pathName")}),it("Verifico getStemp",function(){var steps=pathTest.getSteps();expect(steps).toEqual(stepsTest)})}),describe("Test di unità TU46",function(){beforeAll(function(){pathTest=new Path(1,"pathName",stepsTest,!0)}),it("Verifico setName",function(){var newName="newPathName";pathTest.setName(newName);var result=pathTest.getName();expect(result).toEqual(newName)}),it("Verifico isDefault",function(){var def=pathTest.isDefault();expect(def).toBe(!0)})})}),describe("Test di unità TU44  Premi::Front-End::Model::Path",function(){var pathTest,nr1=new NodeReference(0,"titolo1"),nr2=new NodeReference(1,"titolo2"),nr3=new NodeReference(2,"titolo2"),stepsTest=[nr1,nr2,nr3];beforeEach(function(){pathTest=new Path(1,"pathName",stepsTest,!0)}),it("Verifico addStep",function(){var lung=pathTest.getSteps().length;pathTest.addStep(3,"titolo3");var lungDopo=pathTest.getSteps().length;expect(lungDopo).toEqual(lung+1)}),it("Verifico deleteStep",function(){var lung=pathTest.getSteps().length;pathTest.deleteStep(3);var lungDopo=pathTest.getSteps().length;expect(lungDopo).toEqual(lung-1)})}),describe("Test di unità TU45 Premi::Front-End::Model::Path",function(){var pathTest,nr1=new NodeReference(0,"titolo1"),nr2=new NodeReference(1,"titolo2"),nr3=new NodeReference(2,"titolo2"),stepsTest=[nr1,nr2,nr3];beforeEach(function(){pathTest=new Path(1,"pathName",stepsTest,!0)}),it("Verifico getId",function(){var id=pathTest.getId();expect(id).toEqual(1)}),it("Verifico getName",function(){var name=pathTest.getName();expect(name).toEqual("pathName")}),it("Verifico getStemp",function(){var steps=pathTest.getSteps();expect(steps).toEqual(stepsTest)})}),describe("Test di unità TU46 Premi::Front-End::Model::Path",function(){var presentationNode,child1=new NodeReference(0,"titolo1"),child2=new NodeReference(1,"titolo2"),child3=new NodeReference(2,"titolo2"),childNodes=[child1,child2,child3],associated1=new NodeReference(3,"titolo3"),associated2=new NodeReference(4,"titolo4"),associated3=new NodeReference(5,"titolo5"),associatedNodes=[associated1,associated2,associated3],parentNode=new NodeReference(6,"titolo6"),nodeContent1=new NodeContent(0,"text_content",1,2,100,200,"text"),nodeContent2=new NodeContent(1,"img_content",3,4,100,200,"imgUrl"),nodeContent3=new NodeContent(2,"title_content",5,6,100,200,"title"),content=[nodeContent1,nodeContent2,nodeContent3];beforeEach(function(){presentationNode=new PresentationNode("nodeId",content,parentNode,childNodes,associatedNodes)}),it("Verifico getParentNode",function(){var parent=presentationNode.getParentNode();expect(parent).toEqual(parentNode)}),it("Verifico getChildNodes",function(){var childs=presentationNode.getChildNodes();expect(childs).toEqual(childNodes)}),it("Verifico getAssociatedNodes",function(){var associated=presentationNode.getAssociatedNodes();expect(associated).toEqual(associatedNodes)})}),describe("PasswordController",function(){beforeEach(module("app"));var $controller;beforeEach(inject(function(_$controller_){$controller=_$controller_})),describe("$scope.grade",function(){var $scope,controller;beforeEach(function(){$scope={},controller=$controller("PasswordController",{$scope:$scope})}),it('sets the strength to "strong" if the password length is >8 chars',function(){$scope.password="longerthaneightchars",$scope.grade(),expect($scope.strength).toEqual("strong")}),it('sets the strength to "weak" if the password length <3 chars',function(){$scope.password="a",$scope.grade(),expect($scope.strength).toEqual("weak")})})}),describe("AuthService Test",function(){var httpBackend,BACKEND_URL,authService,cookies,scope,email,password,dataReceived,success,failure;email="test@test.it",password="pwd";var callback=function(response,data){dataReceived=data,1==response?success=!0:failure=!0};beforeEach(function(){angular.mock.module("ngCookies"),module("authentication")}),beforeEach(module(function($provide){BACKEND_URL="localhost",$provide.value("BACKEND_URL",BACKEND_URL)})),beforeEach(inject(function($httpBackend,$cookies,$rootScope,BACKEND_URL,_AuthService_){httpBackend=$httpBackend,authService=_AuthService_,cookies=$cookies,scope=$rootScope})),beforeEach(function(){dataReceived="",success=!1,failure=!1}),it("Successfully loginUser",function(){expect(dataReceived).toBe(""),expect(success).toBe(!1),expect(failure).toBe(!1),expect(cookies.shike_user).not.toBeDefined(),expect(cookies.shike_token).not.toBeDefined(),expect(scope.userLogged).not.toBeDefined(),httpBackend.whenGET(BACKEND_URL+"/user/token").respond(201,"authenticated","","",""),authService.loginUser(email,password,callback),httpBackend.flush(),expect(dataReceived).toBe(null),expect(success).toBe(!0),expect(failure).toBe(!1),expect(cookies.shike_user).toBe("test@test.it"),expect(cookies.shike_token).toBe("authenticated"),expect(scope.userLogged).toBe(!0)}),it("Wrong loginUser",function(){expect(dataReceived).toBe(""),expect(success).toBe(!1),expect(failure).toBe(!1),expect(cookies.shike_user).not.toBeDefined(),expect(cookies.shike_token).not.toBeDefined(),expect(scope.userLogged).not.toBeDefined(),httpBackend.whenGET(BACKEND_URL+"/user/token").respond(404,"error","","",""),authService.loginUser(email,password,callback),httpBackend.flush(),expect(dataReceived).toBe("error"),expect(success).toBe(!1),expect(failure).toBe(!0),expect(cookies.shike_user).not.toBeDefined(),expect(cookies.shike_token).not.toBeDefined(),expect(scope.userLogged).not.toBeDefined()}),it("Successfully logoutUser",function(){scope.userLogged=!0,cookies.shike_user="user01",cookies.shike_token="authenticated",authService.logoutUser(function(){}),expect(scope.userLogged).toBe(!1),expect(cookies.shike_user).not.toBeDefined(),expect(cookies.shike_token).not.toBeDefined()}),it("User not logged",function(){var logged=authService.isLogged();expect(logged).toBe(!1)}),it("User logged",function(){cookies.shike_user="user01";var logged=authService.isLogged();expect(logged).toBe(!0)}),it("AuthRequest",function(){cookies.shike_token="authenticated";var authResponse,authcall=function(value){authResponse=value};expect(authResponse).not.toBeDefined(),authService.authRequest(authcall),expect(authResponse).toBe("authenticated")})}),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);